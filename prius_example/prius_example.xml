<?xml version="1.0" ?>
<VisualStates>
  <config type="1">
    <buildDependencies>
      <dependency>rospy</dependency>
      <dependency>sensor_msgs</dependency>
      <dependency>geometry_msgs</dependency>
      <dependency>prius_msgs</dependency>
    </buildDependencies>
    <runDependencies>
      <dependency>rospy</dependency>
      <dependency>sensor_msgs</dependency>
      <dependency>geometry_msgs</dependency>
      <dependency>prius_msgs</dependency>
    </runDependencies>
    <topics>
      <topic id="0">
        <name>/prius</name>
        <type>prius_msgs/Control</type>
        <opType>Publish</opType>
      </topic>
      <topic id="1">
        <name>/prius/front_left_laser/scan</name>
        <type>sensor_msgs/LaserScan</type>
        <opType>Subscribe</opType>
      </topic>
      <topic id="2">
        <name>/prius/front_right_laser/scan</name>
        <type>sensor_msgs/LaserScan</type>
        <opType>Subscribe</opType>
      </topic>
      <topic id="3">
        <name>/joint_states</name>
        <type>sensor_msgs/JointState</type>
        <opType>Subscribe</opType>
      </topic>
      <topic id="4">
        <name>/prius/back_camera/image_raw</name>
        <type>sensor_msgs/Image</type>
        <opType>Subscribe</opType>
      </topic>
      <topic id="5">
        <name>/prius/front_camera/image_raw</name>
        <type>sensor_msgs/Image</type>
        <opType>Subscribe</opType>
      </topic>
      <topic id="6">
        <name>/prius/left_camera/image_raw</name>
        <type>sensor_msgs/Image</type>
        <opType>Subscribe</opType>
      </topic>
      <topic id="7">
        <name>/prius/right_camera/image_raw</name>
        <type>sensor_msgs/Image</type>
        <opType>Subscribe</opType>
      </topic>
      <topic id="8">
        <name>/darknet_ros/bounding_boxes</name>
        <type>darknet_ros_msgs/BoundingBoxes</type>
        <opType>Subscribe</opType>
      </topic>
    </topics>
  </config>
  <global_namespace>
    <functions></functions>
    <variables></variables>
  </global_namespace>
  <libraries>
    <library>numpy as np</library>
  </libraries>
  <state id="0" initial="True">
    <posx>0.0</posx>
    <posy>0.0</posy>
    <name>root</name>
    <code></code>
    <timestep>100</timestep>
    <namespace>
      <functions></functions>
      <variables></variables>
    </namespace>
    <state id="1" initial="True">
      <posx>877.0</posx>
      <posy>948.0</posy>
      <name>crossing</name>
      <code></code>
      <timestep>100</timestep>
      <namespace>
        <functions>def calculate_steer(self):
	left_ranges = self.globalNamespace.prius_front_left_laser_scan.ranges
	right_ranges = self.globalNamespace.prius_front_right_laser_scan.ranges
	left_ranges = left_ranges[:len(left_ranges)-100] # Filter for error
	right_ranges = right_ranges[100:]  # Filter for error
	min_left = min(left_ranges)
	min_right = min(right_ranges)
	error = min_left - min_right
	p = 0.9 * error
	if p &gt; 1: return 1
	elif p &lt; -1: return -1
	else: return p

def calculate_throttle(self, desired_velocity):
	feedback_velocity = np.average(np.array(self.globalNamespace.joint_states.velocity[:4])) # 4 Wheels
	error = desired_velocity - feedback_velocity
	p = 0.5 * error
	if p &gt; 1: return 1
	elif p &lt; -1: return -1
	else: return p

def is_stop_sign(self):
	right_ranges = self.globalNamespace.prius_front_right_laser_scan.ranges
	right_front_ranges = np.array(right_ranges[len(right_ranges) - 200:])
	print(right_front_ranges)
	from darknet_ros_msgs.msg import BoundingBox
	bb = BoundingBox()
	for bbox in self.globalNamespace.darknet_ros_bounding_boxes.bounding_boxes:
		bb = bbox
		print(bb.Class)
		if str(bb.Class) == &quot;stop sign&quot; and bb.probability &gt; 0.5 and (right_front_ranges &lt; 5).any():
			print(&quot;Found Stop Sign&quot;)
			self.is_stop = True
			return
	self.is_stop = False</functions>
        <variables>self.is_stop = False</variables>
      </namespace>
      <state id="3" initial="True">
        <posx>916.0</posx>
        <posy>926.0</posy>
        <name>stay_on_road</name>
        <code>throttle = self.namespace.calculate_throttle(10)
steer = self.namespace.calculate_steer()
command = Control()
command.throttle = throttle
command.brake = 0
command.steer = 0
self.globalNamespace.publishprius(command)</code>
        <timestep>100</timestep>
        <namespace>
          <functions></functions>
          <variables></variables>
        </namespace>
        <transition id="1">
          <type>1</type>
          <condition>self.namespace.is_stop_sign()
return self.namespace.is_stop
</condition>
          <posx>876.5</posx>
          <posy>829.5</posy>
          <name>is_stop_sign</name>
          <originid>3</originid>
          <destinationid>4</destinationid>
          <code></code>
        </transition>
      </state>
      <state id="4" initial="False">
        <posx>922.0</posx>
        <posy>732.0</posy>
        <name>stop_on_sign</name>
        <code>command = Control()
command.throttle = 0
command.brake = 1
command.steer = 0
self.globalNamespace.publishprius(command)</code>
        <timestep>100</timestep>
        <namespace>
          <functions></functions>
          <variables></variables>
        </namespace>
        <transition id="2">
          <type>0</type>
          <time>2000</time>
          <posx>1014.0</posx>
          <posy>769.0</posy>
          <name>Wait2Sec</name>
          <originid>4</originid>
          <destinationid>5</destinationid>
          <code></code>
        </transition>
      </state>
      <state id="5" initial="False">
        <posx>1078.0</posx>
        <posy>846.0</posy>
        <name>get_on_highway</name>
        <code></code>
        <timestep>100</timestep>
        <namespace>
          <functions></functions>
          <variables></variables>
        </namespace>
        <transition id="4">
          <type>0</type>
          <time>7600</time>
          <posx>1026.0</posx>
          <posy>916.0</posy>
          <name>turning</name>
          <originid>5</originid>
          <destinationid>3</destinationid>
          <code></code>
        </transition>
        <state id="6" initial="True">
          <posx>942.0</posx>
          <posy>818.0</posy>
          <name>Forward</name>
          <code>command = Control()
command.throttle = 0.2
command.brake = 0
command.steer = 0
self.globalNamespace.publishprius(command)</code>
          <timestep>100</timestep>
          <namespace>
            <functions></functions>
            <variables></variables>
          </namespace>
          <transition id="5">
            <type>0</type>
            <time>5000</time>
            <posx>941.5</posx>
            <posy>890.5</posy>
            <name>turn_right</name>
            <originid>6</originid>
            <destinationid>7</destinationid>
            <code></code>
          </transition>
        </state>
        <state id="7" initial="False">
          <posx>943.0</posx>
          <posy>962.0</posy>
          <name>SteerRight</name>
          <code>command = Control()
command.throttle = 0.2
command.brake = 0
command.steer = -0.7
self.globalNamespace.publishprius(command)</code>
          <timestep>100</timestep>
          <namespace>
            <functions></functions>
            <variables></variables>
          </namespace>
        </state>
      </state>
    </state>
  </state>
</VisualStates>
